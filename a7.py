# -*- coding: utf-8 -*-
"""A7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RG-Sj-9BhEno82YvZ60M5LKp3iv4AWD_
"""

import pandas as pd
import re
from transformers import DistilBertTokenizer, DistilBertForSequenceClassification, Trainer, TrainingArguments
import torch
from torch.utils.data import Dataset

# Check if GPU is available and set device
device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')

# Define Dataset Class
class ToxicDataset(Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item

    def __len__(self):
        return len(self.labels)

# Preprocess data for train
def preprocess_data_train(df):
    # Columns for labels in train_df
    label_cols = ['toxic', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate']

    # Ensure all text is lowercased and clean the comments
    df['comment_text'] = df['comment_text'].str.lower()
    df['comment_text'] = df['comment_text'].apply(lambda x: re.sub(r'\s+', ' ', re.sub(r'[^\w\s]', '', x)).strip())

    # Create a binary toxic label by aggregating the toxicity columns
    df['toxic_binary'] = (df[label_cols].sum(axis=1) > 0).astype(int)

    return df

# Preprocess data for test (no labels)
def preprocess_data_test(df):
    # Preprocess text in test data only
    df['comment_text'] = df['comment_text'].str.lower()
    df['comment_text'] = df['comment_text'].apply(lambda x: re.sub(r'\s+', ' ', re.sub(r'[^\w\s]', '', x)).strip())

    return df

# Load train and test data
train_df = pd.read_csv("train.csv")
test_df = pd.read_csv("test.csv")

# Preprocess data
train_df = preprocess_data_train(train_df)
test_df = preprocess_data_test(test_df)

# Tokenizer for DistilBERT
tokenizer = DistilBertTokenizer.from_pretrained('distilbert-base-uncased')

# Tokenize train data
train_encodings = tokenizer(list(train_df['comment_text']), truncation=True, padding=True, return_tensors='pt')
train_labels = train_df['toxic_binary'].values

# Create Dataset
train_dataset = ToxicDataset(train_encodings, train_labels)

# Load model
model = DistilBertForSequenceClassification.from_pretrained('distilbert-base-uncased', num_labels=2)  # Binary classification

from sklearn.model_selection import train_test_split

# Split train_df into train and validation sets (80% for training, 20% for validation)
train_df, val_df = train_test_split(train_df, test_size=0.2, random_state=42)

# Preprocess both train and validation data
train_df = preprocess_data_train(train_df)
val_df = preprocess_data_train(val_df)

# Tokenize the training and validation data
train_encodings = tokenizer(list(train_df['comment_text']), truncation=True, padding=True, return_tensors='pt')
train_labels = train_df['toxic_binary'].values
val_encodings = tokenizer(list(val_df['comment_text']), truncation=True, padding=True, return_tensors='pt')
val_labels = val_df['toxic_binary'].values

# Create Datasets for train and validation
train_dataset = ToxicDataset(train_encodings, train_labels)
val_dataset = ToxicDataset(val_encodings, val_labels)

# Initialize Trainer
trainer = Trainer(
    model=model,                         # The model to be trained
    args=training_args,                  # Training arguments
    train_dataset=train_dataset,         # Training dataset
    eval_dataset=val_dataset,            # Validation dataset (added here)
    tokenizer=tokenizer,                 # Tokenizer to preprocess input data
)

# Fine-tune the model
trainer.train()

#Save the fine-tuned model
model.save_pretrained('./toxic_comment_model')
tokenizer.save_pretrained('./toxic_comment_model')

#Save the fine-tuned model
model.save_pretrained('./toxic_comment_model')
tokenizer.save_pretrained('./toxic_comment_model')